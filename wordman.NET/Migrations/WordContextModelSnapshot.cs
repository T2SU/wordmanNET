// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using wordman.SQLite;

namespace wordman.Migrations
{
    [DbContext(typeof(WordContext))]
    partial class WordContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("wordman.SQLite.Antonym", b =>
                {
                    b.Property<int>("AntonymID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AntonymWordID");

                    b.Property<int>("WordID");

                    b.HasKey("AntonymID");

                    b.HasIndex("WordID");

                    b.ToTable("Antonyms");
                });

            modelBuilder.Entity("wordman.SQLite.Example", b =>
                {
                    b.Property<int>("ExampleID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Sentence");

                    b.Property<int>("WordID");

                    b.HasKey("ExampleID");

                    b.HasIndex("WordID");

                    b.ToTable("Example");
                });

            modelBuilder.Entity("wordman.SQLite.Synonym", b =>
                {
                    b.Property<int>("SynonymID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("SynonymWordID");

                    b.Property<int>("WordID");

                    b.HasKey("SynonymID");

                    b.HasIndex("WordID");

                    b.ToTable("Synonyms");
                });

            modelBuilder.Entity("wordman.SQLite.Word", b =>
                {
                    b.Property<int>("WordID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<DateTime>("LastReferenced");

                    b.Property<int>("Referenced");

                    b.HasKey("WordID");

                    b.HasIndex("Content")
                        .IsUnique();

                    b.ToTable("Words");
                });

            modelBuilder.Entity("wordman.SQLite.Antonym", b =>
                {
                    b.HasOne("wordman.SQLite.Word", "Word")
                        .WithMany("Antonyms")
                        .HasForeignKey("WordID")
                        .HasConstraintName("foreignKey_Word_Antonyms")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("wordman.SQLite.Example", b =>
                {
                    b.HasOne("wordman.SQLite.Word", "Word")
                        .WithMany("Examples")
                        .HasForeignKey("WordID")
                        .HasConstraintName("foreignKey_Word_Examples")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("wordman.SQLite.Synonym", b =>
                {
                    b.HasOne("wordman.SQLite.Word", "Word")
                        .WithMany("Synonyms")
                        .HasForeignKey("WordID")
                        .HasConstraintName("foreignKey_Word_Synonyms")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
